how to use 0-add_integer.py
this function basically returns addition integer for of a and  b

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

::

    >>> add_integer(2.0, 3.0)
    5

Note that floats are casted to ints before addition is performed.

::
>>>add_integer(100, -2)
   98
>>>add_integer(2)
   100
here only one value is present so it will replace with a i.e a=2 and in function default value 98 so b=98

>>>add_integer(100.3, -2)
   98

case 2: Non-numeric values

NOTE: a function is defined in a such way that it will raise a error if value is not numeric type

>>>add_integer(2+3j,1)
   raise TypeError("a must be an integer")
TypeError: a must be an integer
>>>add_integer(196, True)
   raise TypeError("b must be an integer")
TypeError: b must be an integer
>>>add_integer({})
   raise TypeError("a must be an integer")
TypeError: a must be an integer
>>>add_integer(2.44, 'Hey')
  raise TypeError("b must be an integer")
TypeError: b must be an integer
>>>add_integer(None)
raise TypeError("a must be an integer")
TypeError: a must be an integer`
